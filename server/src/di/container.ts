import { Container } from 'inversify';
import { UserRepository } from '../repositories/UserRepository';
import { AuthService } from '../services/auth/AuthService';
import { OTPService } from '../services/auth/OTPService';
import { UserService } from '../services/userService/UserService';
import { UserController } from '../controllers/userController/UserController';
import { AuthController } from '../controllers/auth/AuthController';
import { IUserRepository } from '../core/interfaces/repositories/IUserRepository';
import { IAuthService } from '../core/interfaces/services/auth/IAuthService';
import { IOTPService } from '../core/interfaces/services/auth/IOTPService';
import { IUserService } from '../core/interfaces/services/user/IUserService';
import { IAuthController } from '../core/interfaces/controllers/auth/IAuthController';
import { TYPES } from '../di/types';
import { IUserController } from '../core/interfaces/controllers/user/IUserController';
import { IAdminService } from '../core/interfaces/services/admin/IAdminService';
import { AdminService } from '../services/adminService/AdminService';
import { IAdminController } from '../core/interfaces/controllers/admin/IAdminController';
import { AdminController } from '../controllers/adminController/AdminController';
import { IUserAuthMiddleware } from '../core/interfaces/middlewares/IUserAuthMiddleware';
import UserAuthMiddleware from '../middleware/UserAuthMiddleware';
import { IAdminAuthMiddleware } from '../core/interfaces/middlewares/IAdminAuthMiddleware';
import AdminAuthMiddleware from '../middleware/AdminAuthMiddleware';
import { IUsersService } from '../core/interfaces/services/admin/IUsersService';
import UsersService from '../services/adminService/users.service';
import { IUsersController } from '../core/interfaces/controllers/admin/IUsersController';
import { UsersController } from '../controllers/adminController/users.controller';
import { ConnectionRepository } from '../repositories/ConnectionRepository';
import { IConnectionRepository } from '../core/interfaces/repositories/IConnectionRepository';
import { INotificationRepository } from '../core/interfaces/repositories/INotificationRepository';
import { NotificationRepository } from '../repositories/NotificationRepository';
import { ReportRepository } from '../repositories/ReportRepository';
import { IUserConnectionService } from '../core/interfaces/services/user/IUserConnectionService';
import { IReportRepository } from '../core/interfaces/repositories/IReportRepository';
import { UserConnectionService } from '../services/userService/user.connection.service';
import { IUserConnectionController } from '../core/interfaces/controllers/user/IUserConnectionController';
import { UserConnectionController } from '../controllers/userController/user.connection.controller';
import { GoogleAuthService } from '../services/auth/GoogleAuthService';
import { IGoogleAuthService } from '../core/interfaces/services/auth/IGoogleAuthService';
import { GoogleAuthController } from '../controllers/auth/GoogleAuthController';
import { IGoogleAuthController } from '../core/interfaces/controllers/auth/IGoogleAuthController';
import { IBadgeRepository } from '../core/interfaces/repositories/IBadgeRepository';
import { BadgeRepository } from '../repositories/BadgeRepository';
import { IAdminBadgeService } from '../core/interfaces/services/admin/IAdmin.Badge.Service';
import { AdminBadgeService } from '../services/adminService/admin.badge.service';
import { IUserBadgeService } from '../core/interfaces/services/user/IUser.Badge.Service';
import { UserBadgeService } from '../services/userService/user.badge.service';
import { IAdminBadgeController } from '../core/interfaces/controllers/admin/IAdmin.Badge.Controller';
import { AdminBadgeController } from '../controllers/adminController/admin.badge.controller';
import { IUserBadgeController } from '../core/interfaces/controllers/user/IUser.Badge.Controller';
import { UserBadgeController } from '../controllers/userController/user.badge.controller';
import { IUnbanUsersJob } from '../core/interfaces/middlewares/IUnbanUserJob';
import { UnbanUsersJob } from '../middleware/UnbanUsersJob';
import { ForgotPasswordService } from '../services/auth/ForgotPasswordService';
import { IForgotPasswordService } from '../core/interfaces/services/auth/IForgotPasswordService';
import { ForgotPasswordcontroller } from '../controllers/auth/ForgotPasswordController';
import { IForgotPasswordcontroller } from '../core/interfaces/controllers/auth/IforgotPasswordController';
import { ICoinPlanRepository } from '../core/interfaces/repositories/ICoinPlanRepository';
import { CoinPlanRepository } from '../repositories/CoinPlanRepository';
import { IAdminCoinPlanService } from '../core/interfaces/services/admin/IAdmin.CoinPlan.Service';
import { AdminCoinPlanService } from '../services/adminService/admin.coinPlan.service';
import IAdminCoinPlanController from '../core/interfaces/controllers/admin/IAdmin.CoinPlan.Controller';
import { AdminCoinPlanController } from '../controllers/adminController/admin.coinPlan.controller';
import IUserCoinPlanService from '../core/interfaces/services/user/IUser.CoinPlan.Service';
import { UserCoinPlanService } from '../services/userService/user.coinPlan.service';
import IUserCoinPlanController from '../core/interfaces/controllers/user/IUser.CoinPlan.controller';
import { UserCoinPlanController } from '../controllers/userController/user.coinPlan.controller';
import ICoinTransactionRepository from '../core/interfaces/repositories/ICoinTransactionRepository';
import { CoinTransactionRepository } from '../repositories/CoinTransactionRepository';
import IAdminReportService from '../core/interfaces/services/admin/IAdmin.Report.Service';
import { AdminReportService } from '../services/adminService/admin.report.service';
import IAdminReportController from '../core/interfaces/controllers/admin/IAdmin.report.Controller';
import { AdminReportController } from '../controllers/adminController/admin.report.controller';
import { IQuestionRepository } from '../core/interfaces/repositories/IQuestionRepository';
import { QuestionRepository } from '../repositories/QuestionRepository';
import { ITagRepository } from '../core/interfaces/repositories/ITagRepository';
import { TagRepository } from '../repositories/TagRepository';
import { IUserTagService } from '../core/interfaces/services/user/IUser.Tag.Service';
import { UserTagService } from '../services/userService/user.tag.service';
import { IUserTagController } from '../core/interfaces/controllers/user/IUser.Tag.Controller';
import { UserTagController } from '../controllers/userController/user.tag.controller';
import { IUserQuestionService } from '../core/interfaces/services/user/IUser.Question.Service';
import { UserQuestionService } from '../services/userService/user.question.service';
import { IUserQuestionController } from '../core/interfaces/controllers/user/IUser.Question.Controller';
import { UserQuestionController } from '../controllers/userController/user.question.controller';
import { IAdminTagController } from '../core/interfaces/controllers/admin/IAdmin.Tag.Controller';
import { AdminTagController } from '../controllers/adminController/admin.tag.controller';
import { IAdminTagService } from '../core/interfaces/services/admin/IAdmin.Tag.Service';
import { AdminTagService } from '../services/adminService/admin.tag.service';
import IUserNotificationService from '../core/interfaces/services/user/IUser.Notification.Service';
import { UserNotificationService } from '../services/userService/user.notification.service';
import IUserSocketController from '../core/interfaces/controllers/user/IUser.Socket.Controller';
import { UserSocketController } from '../controllers/userController/user.socket.controller';
import IUserNotificationController from '../core/interfaces/controllers/user/IUser.Notification.Controller';
import { UserNotificationController } from '../controllers/userController/user.notification.controller';
import IReactionRepository from '../core/interfaces/repositories/IReactionRepository';
import { ReactionRepository } from '../repositories/ReactionRepository';
import { IAnswerRepository } from '../core/interfaces/repositories/IAnswerRepository';
import { AnswerRepository } from '../repositories/AnswerRepository';
import { IUserAnswerService } from '../core/interfaces/services/user/IUser.Answer.Service';
import { UserAnswerService } from '../services/userService/user.answer.service';
import { IUserAnswerController } from '../core/interfaces/controllers/user/IUser.Answer.Controller';
import { UserAnswerController } from '../controllers/userController/user.answer.controller';
import { IOrderRepository } from '../core/interfaces/repositories/IOrderRepository';
import { OrderRepository } from '../repositories/OrderRepository';
import { IAddressRepository } from '../core/interfaces/repositories/IAddressRepository';
import { AddressRepository } from '../repositories/AddressRepository';
import { RewardRepository } from '../repositories/RewardRepository';
import { IAdminRewardService } from '../core/interfaces/services/admin/IAdmin.Reward.Service';
import { AdminRewardService } from '../services/adminService/admin.reward.service';
import { IAdminRewardController } from '../core/interfaces/controllers/admin/IAdmin.Reward.Controller';
import { AdminRewardController } from '../controllers/adminController/admin.reward.controller';
import { IUserRewardService } from '../core/interfaces/services/user/IUser.Reward.Service';
import { UserRewardService } from '../services/userService/user.reward.service';
import { UserRewardController } from '../controllers/userController/user.reward.controller';
import IUserRewardController from '../core/interfaces/controllers/user/IUser.Reward.Controller';
import { IUserAddressService } from '../core/interfaces/services/user/IUser.Address.Service';
import { UserAddressService } from '../services/userService/user.address.service';

const container = new Container();

// Repositories
container.bind<IUserRepository>(TYPES.UserRepository).to(UserRepository);
container.bind<IConnectionRepository>(TYPES.ConnectionRepository).to(ConnectionRepository);
container.bind<INotificationRepository>(TYPES.NotificationRepository).to(NotificationRepository);
container.bind<IReportRepository>(TYPES.ReportRepository).to(ReportRepository);
container.bind<IBadgeRepository>(TYPES.BadgeRepository).to(BadgeRepository);
container.bind<ICoinPlanRepository>(TYPES.CoinPlanRepository).to(CoinPlanRepository);
container.bind<ICoinTransactionRepository>(TYPES.CoinTransactionRepository).to(CoinTransactionRepository);
container.bind<IQuestionRepository>(TYPES.QuestionRepository).to(QuestionRepository);
container.bind<ITagRepository>(TYPES.TagRepository).to(TagRepository);
container.bind<IReactionRepository>(TYPES.ReactionRepository).to(ReactionRepository);
container.bind<IAnswerRepository>(TYPES.AnswerRepository).to(AnswerRepository);
container.bind<IOrderRepository>(TYPES.OrderRepository).to(OrderRepository);
container.bind<IAddressRepository>(TYPES.AddressRepository).to(AddressRepository);
container.bind<RewardRepository>(TYPES.RewardRepository).to(RewardRepository);

// Services
container.bind<IAuthService>(TYPES.AuthService).to(AuthService);
container.bind<IOTPService>(TYPES.OTPService).to(OTPService);
container.bind<IUserService>(TYPES.UserService).to(UserService);
container.bind<IAdminService>(TYPES.AdminService).to(AdminService);
container.bind<IUsersService>(TYPES.UsersService).to(UsersService);
container.bind<IUserConnectionService>(TYPES.UserConnectionService).to(UserConnectionService);
container.bind<IGoogleAuthService>(TYPES.GoogleAuthService).to(GoogleAuthService);
container.bind<IUserBadgeService>(TYPES.UserBadgeService).to(UserBadgeService);
container.bind<IAdminBadgeService>(TYPES.AdminBadgeService).to(AdminBadgeService);
container.bind<IForgotPasswordService>(TYPES.ForgotPasswordService).to(ForgotPasswordService);
container.bind<IAdminCoinPlanService>(TYPES.AdminCoinPlanService).to(AdminCoinPlanService);
container.bind<IUserCoinPlanService>(TYPES.UserCoinPlanService).to(UserCoinPlanService);
container.bind<IAdminReportService>(TYPES.AdminReportService).to(AdminReportService);
container.bind<IUserTagService>(TYPES.UserTagService).to(UserTagService);
container.bind<IAdminTagService>(TYPES.AdminTagService).to(AdminTagService);
container.bind<IUserQuestionService>(TYPES.UserQuestionService).to(UserQuestionService);
container.bind<IUserNotificationService>(TYPES.UserNotificationService).to(UserNotificationService);
container.bind<IUserAnswerService>(TYPES.UserAnswerService).to(UserAnswerService);
container.bind<IAdminRewardService>(TYPES.AdminRewardService).to(AdminRewardService);
container.bind<IUserRewardService>(TYPES.UserRewardService).to(UserRewardService);
container.bind<IUserAddressService>(TYPES.UserAddressService).to(UserAddressService);

// Controllers
container.bind<IAuthController>(TYPES.AuthController).to(AuthController);
container.bind<IUserController>(TYPES.UserController).to(UserController);
container.bind<IAdminController>(TYPES.AdminController).to(AdminController);
container.bind<IUsersController>(TYPES.UsersController).to(UsersController);
container.bind<IUserConnectionController>(TYPES.UserConnectionController).to(UserConnectionController);
container.bind<IGoogleAuthController>(TYPES.GoogleAuthController).to(GoogleAuthController);
container.bind<IAdminBadgeController>(TYPES.AdminBadgeController).to(AdminBadgeController);
container.bind<IUserBadgeController>(TYPES.UserBadgeController).to(UserBadgeController);
container.bind<IForgotPasswordcontroller>(TYPES.ForgotPasswordController).to(ForgotPasswordcontroller);
container.bind<IAdminCoinPlanController>(TYPES.AdminCoinPlanController).to(AdminCoinPlanController);
container.bind<IUserCoinPlanController>(TYPES.UserCoinPlanController).to(UserCoinPlanController);
container.bind<IAdminReportController>(TYPES.AdminReportController).to(AdminReportController);
container.bind<IUserTagController>(TYPES.UserTagController).to(UserTagController);
container.bind<IUserQuestionController>(TYPES.UserQuestionController).to(UserQuestionController);
container.bind<IAdminTagController>(TYPES.AdminTagController).to(AdminTagController);
container.bind<IUserSocketController>(TYPES.UserSocketController).to(UserSocketController).inSingletonScope();
container.bind<IUserNotificationController>(TYPES.UserNotificationController).to(UserNotificationController);
container.bind<IUserAnswerController>(TYPES.UserAnswerController).to(UserAnswerController);
container.bind<IAdminRewardController>(TYPES.AdminRewardController).to(AdminRewardController);
container.bind<IUserRewardController>(TYPES.UserRewardController).to(UserRewardController)

//mmiddleware
container.bind<IUserAuthMiddleware>(TYPES.UserAuthMiddleware).to(UserAuthMiddleware);
container.bind<IAdminAuthMiddleware>(TYPES.AdminAuthMiddleware).to(AdminAuthMiddleware);
container.bind<IUnbanUsersJob>(TYPES.UnbanUsersJob).to(UnbanUsersJob);

export default container;
